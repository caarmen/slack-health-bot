"""move withings data to new table

Revision ID: 897c349bb45f
Revises: d1a96aed325a
Create Date: 2023-05-13 13:08:11.083878

"""
from datetime import datetime

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "897c349bb45f"
down_revision = "d1a96aed325a"
branch_labels = None
depends_on = None


def _str_to_datetime(input: str) -> datetime:
    return datetime.strptime(input, "%Y-%m-%d %H:%M:%S.%f")


def _fetch_old_user_data() -> dict:
    return [
        {
            **row._asdict(),
            "oauth_expiration_date": _str_to_datetime(row.oauth_expiration_date),
        }
        for row in op.get_bind()
        .execute(
            sa.select(
                sa.table("users"),
                sa.text(
                    ",".join(
                        [
                            "id as user_id",
                            "oauth_userid",
                            "oauth_access_token",
                            "oauth_refresh_token",
                            "oauth_expiration_date",
                        ]
                    )
                ),
            )
        )
        .all()
    ]


def _fetch_new_user_data():
    return [
        {
            **row._asdict(),
            "oauth_expiration_date": _str_to_datetime(row.oauth_expiration_date),
        }
        for row in op.get_bind()
        .execute(
            sa.select(
                sa.table("withings_users"),
                sa.text(
                    ",".join(
                        [
                            "user_id",
                            "oauth_userid",
                            "oauth_access_token",
                            "oauth_refresh_token",
                            "oauth_expiration_date",
                        ]
                    )
                ),
            )
        )
        .all()
    ]


def upgrade() -> None:
    old_user_data = _fetch_old_user_data()
    # ### commands auto generated by Alembic - please adjust! ###
    withings_users_table = op.create_table(
        "withings_users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("oauth_access_token", sa.String(length=40), nullable=True),
        sa.Column("oauth_refresh_token", sa.String(length=40), nullable=True),
        sa.Column("oauth_userid", sa.String(length=40), nullable=False),
        sa.Column("oauth_expiration_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    with op.batch_alter_table("withings_users", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_withings_users_id"), ["id"], unique=False)

    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_column("oauth_userid")
        batch_op.drop_column("oauth_access_token")
        batch_op.drop_column("oauth_expiration_date")
        batch_op.drop_column("oauth_refresh_token")

    # ### end Alembic commands ###

    op.bulk_insert(table=withings_users_table, rows=old_user_data)


def downgrade() -> None:
    new_user_data = _fetch_new_user_data()
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("oauth_refresh_token", sa.VARCHAR(length=40), nullable=True)
        )
        batch_op.add_column(
            sa.Column("oauth_expiration_date", sa.DATETIME(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("oauth_access_token", sa.VARCHAR(length=40), nullable=True)
        )
        batch_op.add_column(
            sa.Column("oauth_userid", sa.VARCHAR(length=40), nullable=True)
        )

    users = sa.table(
        "users",
        sa.column("id"),
        sa.column("oauth_userid"),
        sa.column("oauth_access_token"),
        sa.column("oauth_refresh_token"),
        sa.column("oauth_expiration_date"),
    )
    for data in new_user_data:
        op.get_bind().execute(
            sa.update(users)
            .where(users.c.id == data["user_id"])
            .values({k: v for k, v in data.items() if k != "user_id"})
        )

    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.alter_column("oauth_userid", nullable=False)

    with op.batch_alter_table("withings_users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_withings_users_id"))

    op.drop_table("withings_users")
    # ### end Alembic commands ###
